swagger: "2.0"
info:
  description: "These is POwerBiz main API for running all application."
  version: "1.0.0"
  title: "PowerBiz logAPI"
  termsOfService: "https://powercommerce.asia/terms/"
  contact:
    email: "apiteam@powerbiz.asia"
host: "localhost:3088/documentation"
basePath: "/"
tags:
- name: "User"
  description: "Operations about user function"
- name: "Data"
  description: "Data related function"
- name: "Products"
  description: "Anything about products"
schemes:
- "http"
paths:
  /users:
    post:
      tags:
      - "User"
      summary: "register function for user, seller and vendor"
      description: ""
      operationId: "addRegister"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Registration Data to be submitted"
				type: object
				required:
					- "user_firstname"
					- "user_name"
					- "user_email"
				properties:
					user_firstname:
						type: "string"
						description: "First Name"
					user_name:
						type: "string"
						description: "Last Name"							
					user_email:
						type: "string"
						format: "email"
						description: "Email user"
					user_role:
						type: "string"
						enum: 
							- "seller"
							- "vendor"
							- "user"
						description: 'User role'
					user_password:
						type: "string"
						format: "password"
						description: "Password"
					vendor_name:
						type: "string"
						description: "Vendor name, mandatory for vendor and seller"
					user_phone:
						type: "string"
						description: "phone number, only for user-role"
      responses:
        201:
					description: "Invalid input"
	        schema:
						$ref: "#/definitions/BadRequestError"
				422:
					schema:
						$ref: "#/definitions/BadRequestError"
				500:
					schema:
						$ref: "#/definitions/BadRequestError"
  /users/login:
    post:
      tags:
      - "User"
      summary: "Login function for user, seller and vendor"
      description: ""
      operationId: "addLogin"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Login Data to be submitted"
        required: true
        schema:
					type: "object"
					properties:
						user_email:
							type: "string"
							format: "email"
							description: "Email user"
						user_role:
							type: "string"
							enum: 
								- "seller"
								- "vendor"
								- "user"
							description: "User role"
						user_password:
							type: "string"
							format: "password"
							description: "Password"
						vendor_name:
							type: "string"
							description: "Vendor name, mandatory for vendor and seller"
      responses:
        200:
					description: "Successfull response"
	        schema:
						$ref: "#/definitions/BadRequestError"
				401:
					schema:
						$ref: "#/definitions/BadRequestError"
				422:
					schema:
						$ref: "#/definitions/BadRequestError"
				500:
					schema:
						$ref: "#/definitions/BadRequestError"
definitions:
  BadRequestError:
    description: "Bad request, one or more param not included, or not match"
    type: "object"
    properties:
			status: 
				type: "string"
				description: "fail"
			name: 
				type: "string" 
				description: "BadRequestError"
			message: 
				type: "string"
				description: "Error description"
		example: 
			status: "fail"
			name: "BadRequestError"
      message": "Missing 'storeId' attribute!"
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
